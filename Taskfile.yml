version: '3'

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ü–†–û–ï–ö–¢–ê
# =============================================================================

vars:
  # –í–µ—Ä—Å–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v2.2.1'
  GCI_VERSION: 'v0.13.6'
  GOFUMPT_VERSION: 'v0.8.0'
  BUF_VERSION: '1.55.1'
  PROTOC_GEN_GO_VERSION: 'v1.36.6'
  PROTOC_GEN_GO_GRPC_VERSION: 'v1.5.1'
  PROTOC_GEN_GRPC_GATEWAY_VERSION: 'v2.27.1'
  PROTOC_GEN_VALIDATE_VERSION: 'v1.2.1'
  PROTOC_GEN_OPENAPIV2_VERSION: 'v2.27.1'
  YQ_VERSION: 'v4.45.4'
  GRPCURL_VERSION: 'v1.9.3'
  MOCKERY_VERSION: 'v2.53.3'

  # –ü—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
  BIN_DIR: '{{.ROOT_DIR}}/bin'
  GOLANGCI_LINT: '{{.BIN_DIR}}/golangci-lint'
  GCI: '{{.BIN_DIR}}/gci'
  GOFUMPT: '{{.BIN_DIR}}/gofumpt'
  BUF: '{{.BIN_DIR}}/buf'
  YQ: '{{.BIN_DIR}}/yq'
  PROTOC_GEN_GO: '{{.BIN_DIR}}/protoc-gen-go'
  PROTOC_GEN_GO_GRPC: '{{.BIN_DIR}}/protoc-gen-go-grpc'
  PROTOC_GEN_GRPC_GATEWAY: '{{.BIN_DIR}}/protoc-gen-grpc-gateway'
  PROTOC_GEN_VALIDATE: '{{.BIN_DIR}}/protoc-gen-validate'
  PROTOC_GEN_OPENAPIV2: '{{.BIN_DIR}}/protoc-gen-openapiv2'
  GRPCURL: '{{.BIN_DIR}}/grpcurl'
  MOCKERY: "{{.BIN_DIR}}/mockery"

  # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
  COVERAGE_DIR: '{{.ROOT_DIR}}/coverage'
  COVERAGE_FILE: total.out

  # –ú–æ–¥—É–ª–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
  MODULES: platform shared iam rbac
  SERVICES: cache,eventbus,envoy,iam,logs,metrics,rbac,tracing
  GRPC_SERVER_ADDR: 'localhost:50051'

# =============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –†–ê–ó–†–ê–ë–û–¢–ö–ò
# =============================================================================

tasks:
  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  install-formatters:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã gci –∏ gofumpt –≤ ./bin"
    summary: |
      –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ gofumpt –∏ gci –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bin.
      –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏.
      
      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        - gofumpt: –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ Go
        - gci: –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ Go
    cmds:
      - |
        [ -f {{.GOFUMPT}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gofumpt {{.GOFUMPT_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install mvdan.cc/gofumpt@{{.GOFUMPT_VERSION}}
        }
        [ -f {{.GCI}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gci {{.GCI_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install github.com/daixiang0/gci@{{.GCI_VERSION}}
        }
    status:
      - test -x {{.GOFUMPT}}
      - test -x {{.GCI}}

  install-golangci-lint:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç golangci-lint –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    summary: |
      –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ golangci-lint –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bin.
      –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ go install.
      
      –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {{.GOLANGCI_LINT_VERSION}}
    cmds:
      - |
        [ -f {{.GOLANGCI_LINT}} ] || {
          mkdir -p {{.BIN_DIR}}
          echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          GOBIN={{.BIN_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
        }
    status:
      - test -x {{.GOLANGCI_LINT}}

  install-buf:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Buf –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.BUF}} ] || {
          mkdir -p {{.BIN_DIR}} tmp-buf
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v{{.BUF_VERSION}}/buf-$(uname -s)-$(uname -m).tar.gz" \
            | tar -xz -C tmp-buf
          mv tmp-buf/buf/bin/buf {{.BUF}}
          rm -rf tmp-buf
          chmod +x {{.BUF}}
        }

  yq:install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç yq –≤ bin/ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    cmds:
      - |
        [ -f {{.YQ}} ] || {
          echo 'üì¶ Installing yq...'
          GOBIN={{.BIN_DIR}} go install github.com/mikefarah/yq/v4@{{.YQ_VERSION}}
        }

  mockery:install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç mockery –≤ ./bin"
    cmds:
      - |
        [ -f {{.MOCKERY}} ] || {
          echo 'üì¶ Installing mockery...'
          GOBIN={{.BIN_DIR}} go install github.com/vektra/mockery/v2@{{.MOCKERY_VERSION}}
        }
    status:
      - test -x {{.MOCKERY}}

  grpcurl:install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç grpcurl –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.GRPCURL}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º grpcurl {{.GRPCURL_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install github.com/fullstorydev/grpcurl/cmd/grpcurl@{{.GRPCURL_VERSION}}
        }
    status:
      - test -x {{.GRPCURL}}

# =============================================================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –õ–ò–ù–¢–ò–ù–ì –ö–û–î–ê
# =============================================================================

  format:
    desc: "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç gofumpt + gci, –∏—Å–∫–ª—é—á–∞—è mocks"
    summary: |
      –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Go-—Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gofumpt –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
      –∏ gci –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö mocks.
      
      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        - gofumpt: –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - gci: –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    deps: [ install-formatters ]
    cmds:
      - |
        echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ gofumpt ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GOFUMPT}} -extra -w {} +
          fi
        done
      - |
        echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ gci ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GCI}} write -s standard -s default -s "prefix(github.com/Alexander-Mandzhiev/school_schedule)" {} +
          fi
        done

  lint:
    desc: "–ó–∞–ø—É—Å–∫–∞–µ—Ç golangci-lint –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"
    summary: |
      –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä golangci-lint –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.
      –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.
      –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ gosec (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ golangci-lint).
      
      –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
        - install-golangci-lint: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä
        - format: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    deps: [ install-golangci-lint ]
    vars:
      MODULES: '{{.MODULES}}'
      GOLANGCI_LINT: '{{.GOLANGCI_LINT}}'
    cmds:
      - |
        set -e
        ERR=0
        echo "üîç –õ–∏–Ω—Ç–∏–º –≤—Å–µ –º–æ–¥—É–ª–∏ ..."
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîç –õ–∏–Ω—Ç–∏–º $mod module"
            {{.GOLANGCI_LINT}} run $mod/... --config=.golangci.yml || ERR=1
          fi
        done
        exit $ERR

# =============================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê (PROTOBUF –ò OPENAPI)
# =============================================================================

  proto:install-plugins:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç protoc –ø–ª–∞–≥–∏–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.PROTOC_GEN_GO}} ] || {
          echo 'üì¶ Installing protoc-gen-go...'
          GOBIN={{.BIN_DIR}} go install google.golang.org/protobuf/cmd/protoc-gen-go@{{.PROTOC_GEN_GO_VERSION}}
        }
        [ -f {{.PROTOC_GEN_GO_GRPC}} ] || {
          echo 'üì¶ Installing protoc-gen-go-grpc...'
          GOBIN={{.BIN_DIR}} go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{.PROTOC_GEN_GO_GRPC_VERSION}}
        }
        [ -f {{.PROTOC_GEN_GRPC_GATEWAY}} ] || {
          echo 'üì¶ Installing protoc-gen-grpc-gateway...'
          GOBIN={{.BIN_DIR}} go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@{{.PROTOC_GEN_GRPC_GATEWAY_VERSION}}
        }
        [ -f {{.PROTOC_GEN_VALIDATE}} ] || {
          echo 'üì¶ Installing protoc-gen-validate...'
          GOBIN={{.BIN_DIR}} go install github.com/envoyproxy/protoc-gen-validate@{{.PROTOC_GEN_VALIDATE_VERSION}}
        }
        [ -f {{.PROTOC_GEN_OPENAPIV2}} ] || {
          echo 'üì¶ Installing protoc-gen-openapiv2...'
          GOBIN={{.BIN_DIR}} go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@{{.PROTOC_GEN_OPENAPIV2_VERSION}}
        }

  proto:update-deps:
    deps: [ install-buf ]
    desc: –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ protobuf –∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (googleapis –∏ —Ç.–¥.)
    dir: shared/proto
    cmds:
      - |
        echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ buf..."
        {{.BUF}} dep update

  proto:lint:
    deps: [ install-buf, proto:install-plugins ]
    desc: –ü—Ä–æ–≤–µ—Ä–∫–∞ .proto-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—é
    dir: shared/proto
    cmds:
      - '{{.BUF}} lint'

  proto:gen:
    deps: [ install-buf, proto:install-plugins, proto:lint ]
    desc: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Go-–∫–æ–¥–∞ –∏–∑ .proto
    dir: shared/proto
    cmds:
      - '{{.BUF}} generate --template buf.gen.yaml'

  proto:build:common:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ Common –ø–∞–∫–µ—Ç–∞
    deps: [ install-buf, proto:install-plugins ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/common/v1'
      - '{{.BUF}} build --path common --as-file-descriptor-set --output "../pkg/proto/common/v1/common_descriptor.pb"'

  proto:build:auth:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ Auth —Å–µ—Ä–≤–∏—Å–∞
    deps: [ install-buf, proto:install-plugins, proto:build:common ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/auth/v1'
      - '{{.BUF}} build --path auth --path common --as-file-descriptor-set --output "../pkg/proto/auth/v1/auth_descriptor.pb"'

  proto:build:user:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ User —Å–µ—Ä–≤–∏—Å–∞
    deps: [ install-buf, proto:install-plugins, proto:build:common ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/user/v1'
      - '{{.BUF}} build --path user --path common --as-file-descriptor-set --output "../pkg/proto/user/v1/user_descriptor.pb"'

  proto:build:role:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ Role —Å–µ—Ä–≤–∏—Å–∞
    deps: [ install-buf, proto:install-plugins, proto:build:common ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/role/v1'
      - '{{.BUF}} build --path role --path common --as-file-descriptor-set --output "../pkg/proto/role/v1/role_descriptor.pb"'

  proto:build:permission:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ Permission —Å–µ—Ä–≤–∏—Å–∞
    deps: [ install-buf, proto:install-plugins, proto:build:common ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/permission/v1'
      - '{{.BUF}} build --path permission --path common --as-file-descriptor-set --output "../pkg/proto/permission/v1/permission_descriptor.pb"'

  proto:build:user_role:
    desc: –°–±–æ—Ä–∫–∞ proto —Ñ–∞–π–ª–æ–≤ UserRole —Å–µ—Ä–≤–∏—Å–∞
    deps: [ install-buf, proto:install-plugins, proto:build:common ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../pkg/proto/user_role/v1'
      - '{{.BUF}} build --path user_role --path common --as-file-descriptor-set --output "../pkg/proto/user_role/v1/user_role_descriptor.pb"'

  proto:build:microservices:
    desc: –°–±–æ—Ä–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è Envoy)
    deps: [ install-buf, proto:install-plugins ]
    dir: ./shared/proto
    cmds:
      - 'mkdir -p ../../deploy/compose/envoy'
      - '{{.BUF}} build --as-file-descriptor-set --output "../../deploy/compose/envoy/microservices_descriptor.pb"'

  proto:build:all:
    desc: –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö proto –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    deps: [ proto:build:common, proto:build:auth, proto:build:user, proto:build:role, proto:build:permission, proto:build:user_role, proto:build:microservices ]

  gen:
    desc: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö proto —Ñ–∞–π–ª–æ–≤"
    cmds:
      - task: proto:gen

  mockery:gen:
    desc: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é mockery"
    deps: [ mockery:install ]
    cmds:
      - |
        echo 'üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤...'
        {{.MOCKERY}}

# =============================================================================
# –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–£–õ–Ø–ú–ò
# =============================================================================

  deps:update:
    desc: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
    cmds:
      - |
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ $mod"
            (cd "$mod" && go mod tidy -compat=1.24) || exit 1
          fi
        done

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–û–ö–†–´–¢–ò–ï –ö–û–î–ê
# =============================================================================

  test-coverage:
    desc: "–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (service/repository), –æ—Ç—á—ë—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é + –æ–±—â–∏–π"
    cmds:
      - |
        echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç –ø–æ–∫—Ä—ã—Ç–∏—è..."
        rm -rf {{.COVERAGE_DIR}}
        mkdir -p {{.COVERAGE_DIR}}
        
        ERR=0
        for mod in {{.MODULES}}; do
          echo "üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥—É–ª—å: $mod"
        
          TARGET_PKGS=$(go list ./$mod/... \
            | grep -E '/(internal/(service|repository|api))' \
            | grep -vE '/(mocks|testdata|pkg|proto|pb|cmd)' \
            | paste -sd "," -)
        
          if [ -z "$TARGET_PKGS" ]; then
            echo "‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤ $mod"
            continue
          fi
        
          go test -coverpkg="$TARGET_PKGS" \
            -coverprofile={{.COVERAGE_DIR}}/$mod.out \
            -covermode=atomic \
            $(echo "$TARGET_PKGS" | tr "," " ") || ERR=1
        done
        
        if [ $ERR -ne 0 ]; then
          echo "‚ùå –û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤"
          exit $ERR
        fi
        
        echo
        echo "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é:"
        for mod in {{.MODULES}}; do
          OUTFILE="{{.COVERAGE_DIR}}/$mod.out"
          if [ -f "$OUTFILE" ]; then
            printf " ‚Ä¢ %s: " "$mod"
            go tool cover -func="$OUTFILE" | tail -n1
          fi
        done
        
        echo
        echo "üì¶ –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–∫—Ä—ã—Ç–∏—è..."
        {
          echo "mode: atomic"
          find {{.COVERAGE_DIR}} -type f -name '*.out' ! -name '{{.COVERAGE_FILE}}' \
            -exec grep -h -v "^mode:" {} +
        } > {{.COVERAGE_DIR}}/{{.COVERAGE_FILE}}
        
        echo
        echo "üßæ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º:"
        go tool cover -func={{.COVERAGE_DIR}}/{{.COVERAGE_FILE}} | tail -n1

  coverage:html:
    desc: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á—ë—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    deps: [ test-coverage ]
    cmds:
      - |
        OUTPUT={{.COVERAGE_DIR}}/coverage.html
        echo "üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á—ë—Ç..."
        go tool cover -html={{.COVERAGE_DIR}}/{{.COVERAGE_FILE}} -o $OUTPUT

        echo "üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º $OUTPUT"
        if command -v open &> /dev/null; then
          open $OUTPUT  # macOS
        elif command -v xdg-open &> /dev/null; then
          xdg-open $OUTPUT  # Linux
        else
          echo "üìÇ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $OUTPUT (–æ—Ç–∫—Ä–æ–π –≤—Ä—É—á–Ω—É—é)"
        fi

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï gRPC
# =============================================================================

  grpc:test:list:
    desc: "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ gRPC"
    deps: [ grpcurl:install ]
    cmds:
      - echo "üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ gRPC..."
      - |
        {{.GRPCURL}} -plaintext -d '{}' {{.GRPC_SERVER_ADDR}} list

  grpc:test:get:
    desc: "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID —á–µ—Ä–µ–∑ gRPC"
    deps: [ grpcurl:install ]
    cmds:
      - echo "üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ ID —á–µ—Ä–µ–∑ gRPC... (–∑–∞–º–µ–Ω–∏—Ç–µ ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)"
      - |
        {{.GRPCURL}} -plaintext -d '{
          "id": "REPLACE_WITH_REAL_ID"
        }' {{.GRPC_SERVER_ADDR}} get

# =============================================================================
# –û–ß–ò–°–¢–ö–ê
# =============================================================================

  clean:
    desc: "–û—á–∏—Å—Ç–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    cmds:
      - echo "[task] üßπ –û—á–∏—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
      - find . -name "*.pb.go" -delete
      - find . -name "*.pb.gw.go" -delete
      - echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"


# =============================================================================
# DOCKER COMPOSE - –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–¢–¨–Æ
# =============================================================================

  up-network:
    desc: "–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å school_net"
    cmds:
      - echo "[task] üåê –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å school_net"
      - docker network create school_net || echo "–°–µ—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

  down-network:
    desc: "–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç—å school_net"
    cmds:
      - echo "[task] üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–µ—Ç—å school_net"
      - docker network rm school_net || echo "–°–µ—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"

# =============================================================================
# DOCKER COMPOSE - –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–ê–ú–ò
# =============================================================================


  # Eventbus —Å–µ—Ä–≤–∏—Å—ã (Kafka)
  up-eventbus:
    desc: "–ü–æ–¥–Ω—è—Ç—å eventbus –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    dir: deploy/compose/eventbus
    cmds:
      - echo "[task] üîÑ –ü–æ–¥–Ω–∏–º–∞–µ–º eventbus –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule up --build --detach

  down-eventbus:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å eventbus –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    dir: deploy/compose/eventbus
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º eventbus –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule down


  # Tracing —Å–µ—Ä–≤–∏—Å—ã (Jaeger)
  up-tracing:
    desc: "–ü–æ–¥–Ω—è—Ç—å tracing –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±–µ–∑ OTEL)"
    dir: deploy/compose/tracing
    cmds:
      - echo "[task] üîç –ü–æ–¥–Ω–∏–º–∞–µ–º tracing –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule up --build --detach


  down-tracing:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å tracing –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    dir: deploy/compose/tracing
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tracing –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule down

  # Logs —Å–µ—Ä–≤–∏—Å—ã (ELK)
  up-logs:
    desc: "–ü–æ–¥–Ω—è—Ç—å logs –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±–µ–∑ OTEL)"
    dir: deploy/compose/logs
    cmds:
      - echo "[task] üìù –ü–æ–¥–Ω–∏–º–∞–µ–º logs –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule up --build --detach


  down-logs:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å logs –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    dir: deploy/compose/logs
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º logs –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule down

  # IAM —Å–µ—Ä–≤–∏—Å
  up-iam:
    desc: "–ü–æ–¥–Ω—è—Ç—å iam —Å–µ—Ä–≤–∏—Å –∏ –≤—Å–µ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    dir: deploy/compose/iam
    cmds: 
      - task: up-network
      - echo "[task] üîê –ü–æ–¥–Ω–∏–º–∞–µ–º iam —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
      - docker compose -p school_schedule up --build --detach

  down-iam:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å iam —Å–µ—Ä–≤–∏—Å –∏ –≤—Å–µ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    dir: deploy/compose/iam
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º iam —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
      - docker compose -p school_schedule down --volumes

  # RBAC —Å–µ—Ä–≤–∏—Å
  up-rbac:
    desc: "–ü–æ–¥–Ω—è—Ç—å rbac —Å–µ—Ä–≤–∏—Å –∏ –≤—Å–µ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    dir: deploy/compose/rbac
    cmds: 
      - task: up-network
      - echo "[task] üîí –ü–æ–¥–Ω–∏–º–∞–µ–º rbac —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
      - docker compose -p school_schedule up --build --detach

  down-rbac:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å rbac —Å–µ—Ä–≤–∏—Å –∏ –≤—Å–µ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    dir: deploy/compose/rbac
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rbac —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
      - docker compose -p school_schedule down --volumes

  # Metrics —Å–µ—Ä–≤–∏—Å—ã (Prometheus + Grafana)
  up-metrics:
    desc: "–ü–æ–¥–Ω—è—Ç—å metrics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±–µ–∑ OTEL)"
    dir: deploy/compose/metrics
    cmds:
      - echo "[task] üìä –ü–æ–¥–Ω–∏–º–∞–µ–º metrics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule up --build --detach


  down-metrics:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å metrics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    dir: deploy/compose/metrics
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º metrics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      - docker compose -p school_schedule down --volumes

  # OTEL Collector
  up-otel:
    desc: "–ü–æ–¥–Ω—è—Ç—å –µ–¥–∏–Ω—ã–π OTEL –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"
    dir: deploy/compose/otel
    cmds:
      - echo "[task] üì° –ü–æ–¥–Ω–∏–º–∞–µ–º –µ–¥–∏–Ω—ã–π OTEL –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"
      - docker compose -p school_schedule up --build --detach

  down-otel:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å OTEL –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"
    dir: deploy/compose/otel
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OTEL –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"
      - docker compose -p school_schedule down

  up-cache:
    desc: "–ü–æ–¥–Ω—è—Ç—å cache —Å–µ—Ä–≤–∏—Å (Redis) —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    dir: deploy/compose/cache
    cmds:
      - task: up-network
      - echo "[task] üöÄ –ü–æ–¥–Ω–∏–º–∞–µ–º cache —Å–µ—Ä–≤–∏—Å"
      - docker compose -p school_schedule up --build --detach
  down-cache:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å cache —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    dir: deploy/compose/cache
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cache —Å–µ—Ä–≤–∏—Å"
      - docker compose -p school_schedule down --volumes
      
  up-envoy:
    desc: "–ü–æ–¥–Ω—è—Ç—å Envoy API Gateway"
    dir: deploy/compose/envoy
    cmds:
      - task: up-network
      - task: proto:build:microservices
      - echo "[task] üåê –ü–æ–¥–Ω–∏–º–∞–µ–º Envoy API Gateway"
      - docker compose -p school_schedule up --build --detach

  down-envoy:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å Envoy API Gateway"
    dir: deploy/compose/envoy
    cmds:
      - echo "[task] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Envoy API Gateway"
      - docker compose -p school_schedule down --volumes

# =============================================================================
# DOCKER COMPOSE - –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–ú–ò –°–ï–†–í–ò–°–ê–ú–ò
# =============================================================================

  up-all:
    desc: "–ü–æ–¥–Ω—è—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å –µ–¥–∏–Ω—ã–º OTEL –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º"
    cmds:
      - task: up-network
      - task: up-cache
      - task: up-eventbus
      - task: up-tracing
      - task: up-logs
      - task: up-metrics
      - task: up-otel
      - task: up-iam
      - task: up-rbac
      - task: up-envoy
      - echo '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–¥–Ω—è—Ç—ã —Å domain-specific OTEL!'
      - echo 'Traces HAProxy stats - http://localhost:8408/stats'
      - echo 'API Gateway - http://localhost:8080'

  down-all:
    desc: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤–º–µ—Å—Ç–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    cmds:
      - task: down-envoy
      - task: down-rbac
      - task: down-iam
      - task: down-otel
      - task: down-metrics
      - task: down-logs
      - task: down-tracing
      - task: down-cache
      - task: down-eventbus
      - task: down-network
      - echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"

  restart-all:
    desc: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    cmds:
      - task: down-all
      - task: up-all

# =============================================================================
# DOCKER COMPOSE - –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò
# =============================================================================

  status:
    desc: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    cmds:
      - echo "[task] üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
      - docker ps

  logs:
    desc: "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    cmds:
      - echo "[task] üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
      - echo "--- Eventbus logs ---"
      - docker compose -f deploy/compose/eventbus/docker-compose.yaml logs --tail=20
      - echo "--- IAM logs ---"
      - docker compose -f deploy/compose/iam/docker-compose.yml logs --tail=20
      - echo "--- Metrics logs ---"
      - docker compose -f deploy/compose/metrics/docker-compose.yaml logs --tail=20
      - echo "--- Logs logs ---"
      - docker compose -f deploy/compose/logs/docker-compose.yml logs --tail=20
      - echo "--- Tracing logs ---"
      - docker compose -f deploy/compose/tracing/docker-compose.yml logs --tail=20
      - echo "--- OTEL logs ---"
      - docker compose -f deploy/compose/otel/docker-compose.yml logs --tail=20


  logs-eventbus:
    desc: "–õ–æ–≥–∏ eventbus —Å–µ—Ä–≤–∏—Å–æ–≤"
    dir: deploy/compose/eventbus
    cmds:
      - docker compose logs --tail=50

  logs-iam:
    desc: "–õ–æ–≥–∏ iam —Å–µ—Ä–≤–∏—Å–∞"
    dir: deploy/compose/iam
    cmds:
      - docker compose logs --tail=50

  logs-metrics:
    desc: "–õ–æ–≥–∏ metrics —Å–µ—Ä–≤–∏—Å–æ–≤"
    dir: deploy/compose/metrics
    cmds:
      - docker compose logs --tail=50

  logs-logs:
    desc: "–õ–æ–≥–∏ logs —Å–µ—Ä–≤–∏—Å–æ–≤"
    dir: deploy/compose/logs
    cmds:
      - docker compose logs --tail=50

  logs-tracing:
    desc: "–õ–æ–≥–∏ tracing —Å–µ—Ä–≤–∏—Å–æ–≤"
    dir: deploy/compose/tracing
    cmds:
      - docker compose logs --tail=50

  logs-otel:
    desc: "–õ–æ–≥–∏ otel —Å–µ—Ä–≤–∏—Å–æ–≤"
    dir: deploy/compose/otel
    cmds:
      - docker compose logs --tail=50

# =============================================================================
# DOCKER COMPOSE - –û–ß–ò–°–¢–ö–ê –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–°–£–†–°–ê–ú–ò
# =============================================================================

  clean:
    desc: "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ volumes"
    cmds:
      - echo "[task] üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ Docker —Ä–µ—Å—É—Ä—Å—ã"
      - docker system prune -a --volumes -f
      - echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
