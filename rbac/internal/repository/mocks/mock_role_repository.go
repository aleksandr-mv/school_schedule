// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexander-Mandzhiev/school_schedule/rbac/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

type RoleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleRepository) EXPECT() *RoleRepository_Expecter {
	return &RoleRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, name, description
func (_m *RoleRepository) Create(ctx context.Context, name string, description string) (uuid.UUID, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RoleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *RoleRepository_Expecter) Create(ctx interface{}, name interface{}, description interface{}) *RoleRepository_Create_Call {
	return &RoleRepository_Create_Call{Call: _e.mock.On("Create", ctx, name, description)}
}

func (_c *RoleRepository_Create_Call) Run(run func(ctx context.Context, name string, description string)) *RoleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RoleRepository_Create_Call) Return(_a0 uuid.UUID, _a1 error) *RoleRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_Create_Call) RunAndReturn(run func(context.Context, string, string) (uuid.UUID, error)) *RoleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RoleRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RoleRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RoleRepository_Expecter) Delete(ctx interface{}, id interface{}) *RoleRepository_Delete_Call {
	return &RoleRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *RoleRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *RoleRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleRepository_Delete_Call) Return(_a0 error) *RoleRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *RoleRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *RoleRepository) Get(ctx context.Context, id string) (*model.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RoleRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RoleRepository_Expecter) Get(ctx interface{}, id interface{}) *RoleRepository_Get_Call {
	return &RoleRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *RoleRepository_Get_Call) Run(run func(ctx context.Context, id string)) *RoleRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleRepository_Get_Call) Return(_a0 *model.Role, _a1 error) *RoleRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*model.Role, error)) *RoleRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *RoleRepository) List(ctx context.Context) ([]*model.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RoleRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RoleRepository_Expecter) List(ctx interface{}) *RoleRepository_List_Call {
	return &RoleRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *RoleRepository_List_Call) Run(run func(ctx context.Context)) *RoleRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RoleRepository_List_Call) Return(_a0 []*model.Role, _a1 error) *RoleRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_List_Call) RunAndReturn(run func(context.Context) ([]*model.Role, error)) *RoleRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, updateRole
func (_m *RoleRepository) Update(ctx context.Context, updateRole *model.UpdateRole) error {
	ret := _m.Called(ctx, updateRole)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateRole) error); ok {
		r0 = rf(ctx, updateRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RoleRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - updateRole *model.UpdateRole
func (_e *RoleRepository_Expecter) Update(ctx interface{}, updateRole interface{}) *RoleRepository_Update_Call {
	return &RoleRepository_Update_Call{Call: _e.mock.On("Update", ctx, updateRole)}
}

func (_c *RoleRepository_Update_Call) Run(run func(ctx context.Context, updateRole *model.UpdateRole)) *RoleRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UpdateRole))
	})
	return _c
}

func (_c *RoleRepository_Update_Call) Return(_a0 error) *RoleRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_Update_Call) RunAndReturn(run func(context.Context, *model.UpdateRole) error) *RoleRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
