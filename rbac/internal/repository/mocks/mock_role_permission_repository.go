// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/rbac/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RolePermissionRepository is an autogenerated mock type for the RolePermissionRepository type
type RolePermissionRepository struct {
	mock.Mock
}

type RolePermissionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RolePermissionRepository) EXPECT() *RolePermissionRepository_Expecter {
	return &RolePermissionRepository_Expecter{mock: &_m.Mock}
}

// Assign provides a mock function with given fields: ctx, roleID, permissionID
func (_m *RolePermissionRepository) Assign(ctx context.Context, roleID string, permissionID string) error {
	ret := _m.Called(ctx, roleID, permissionID)

	if len(ret) == 0 {
		panic("no return value specified for Assign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roleID, permissionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RolePermissionRepository_Assign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assign'
type RolePermissionRepository_Assign_Call struct {
	*mock.Call
}

// Assign is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - permissionID string
func (_e *RolePermissionRepository_Expecter) Assign(ctx interface{}, roleID interface{}, permissionID interface{}) *RolePermissionRepository_Assign_Call {
	return &RolePermissionRepository_Assign_Call{Call: _e.mock.On("Assign", ctx, roleID, permissionID)}
}

func (_c *RolePermissionRepository_Assign_Call) Run(run func(ctx context.Context, roleID string, permissionID string)) *RolePermissionRepository_Assign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RolePermissionRepository_Assign_Call) Return(_a0 error) *RolePermissionRepository_Assign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RolePermissionRepository_Assign_Call) RunAndReturn(run func(context.Context, string, string) error) *RolePermissionRepository_Assign_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePermissions provides a mock function with given fields: ctx, roleID
func (_m *RolePermissionRepository) GetRolePermissions(ctx context.Context, roleID string) ([]*model.Permission, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRolePermissions")
	}

	var r0 []*model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Permission, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Permission); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RolePermissionRepository_GetRolePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePermissions'
type RolePermissionRepository_GetRolePermissions_Call struct {
	*mock.Call
}

// GetRolePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
func (_e *RolePermissionRepository_Expecter) GetRolePermissions(ctx interface{}, roleID interface{}) *RolePermissionRepository_GetRolePermissions_Call {
	return &RolePermissionRepository_GetRolePermissions_Call{Call: _e.mock.On("GetRolePermissions", ctx, roleID)}
}

func (_c *RolePermissionRepository_GetRolePermissions_Call) Run(run func(ctx context.Context, roleID string)) *RolePermissionRepository_GetRolePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RolePermissionRepository_GetRolePermissions_Call) Return(_a0 []*model.Permission, _a1 error) *RolePermissionRepository_GetRolePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RolePermissionRepository_GetRolePermissions_Call) RunAndReturn(run func(context.Context, string) ([]*model.Permission, error)) *RolePermissionRepository_GetRolePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: ctx, roleID, permissionID
func (_m *RolePermissionRepository) Revoke(ctx context.Context, roleID string, permissionID string) error {
	ret := _m.Called(ctx, roleID, permissionID)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roleID, permissionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RolePermissionRepository_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type RolePermissionRepository_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - permissionID string
func (_e *RolePermissionRepository_Expecter) Revoke(ctx interface{}, roleID interface{}, permissionID interface{}) *RolePermissionRepository_Revoke_Call {
	return &RolePermissionRepository_Revoke_Call{Call: _e.mock.On("Revoke", ctx, roleID, permissionID)}
}

func (_c *RolePermissionRepository_Revoke_Call) Run(run func(ctx context.Context, roleID string, permissionID string)) *RolePermissionRepository_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RolePermissionRepository_Revoke_Call) Return(_a0 error) *RolePermissionRepository_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RolePermissionRepository_Revoke_Call) RunAndReturn(run func(context.Context, string, string) error) *RolePermissionRepository_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewRolePermissionRepository creates a new instance of RolePermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRolePermissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RolePermissionRepository {
	mock := &RolePermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
