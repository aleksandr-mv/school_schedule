// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/rbac/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EnrichedRoleRepository is an autogenerated mock type for the EnrichedRoleRepository type
type EnrichedRoleRepository struct {
	mock.Mock
}

type EnrichedRoleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *EnrichedRoleRepository) EXPECT() *EnrichedRoleRepository_Expecter {
	return &EnrichedRoleRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EnrichedRoleRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnrichedRoleRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EnrichedRoleRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *EnrichedRoleRepository_Expecter) Delete(ctx interface{}, id interface{}) *EnrichedRoleRepository_Delete_Call {
	return &EnrichedRoleRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *EnrichedRoleRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *EnrichedRoleRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EnrichedRoleRepository_Delete_Call) Return(_a0 error) *EnrichedRoleRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnrichedRoleRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *EnrichedRoleRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *EnrichedRoleRepository) Get(ctx context.Context, id string) (*model.EnrichedRole, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.EnrichedRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.EnrichedRole, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.EnrichedRole); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EnrichedRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrichedRoleRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type EnrichedRoleRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *EnrichedRoleRepository_Expecter) Get(ctx interface{}, id interface{}) *EnrichedRoleRepository_Get_Call {
	return &EnrichedRoleRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *EnrichedRoleRepository_Get_Call) Run(run func(ctx context.Context, id string)) *EnrichedRoleRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EnrichedRoleRepository_Get_Call) Return(_a0 *model.EnrichedRole, _a1 error) *EnrichedRoleRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnrichedRoleRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*model.EnrichedRole, error)) *EnrichedRoleRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, role, expiresAt
func (_m *EnrichedRoleRepository) Set(ctx context.Context, role *model.EnrichedRole, expiresAt time.Time) error {
	ret := _m.Called(ctx, role, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.EnrichedRole, time.Time) error); ok {
		r0 = rf(ctx, role, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnrichedRoleRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type EnrichedRoleRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - role *model.EnrichedRole
//   - expiresAt time.Time
func (_e *EnrichedRoleRepository_Expecter) Set(ctx interface{}, role interface{}, expiresAt interface{}) *EnrichedRoleRepository_Set_Call {
	return &EnrichedRoleRepository_Set_Call{Call: _e.mock.On("Set", ctx, role, expiresAt)}
}

func (_c *EnrichedRoleRepository_Set_Call) Run(run func(ctx context.Context, role *model.EnrichedRole, expiresAt time.Time)) *EnrichedRoleRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.EnrichedRole), args[2].(time.Time))
	})
	return _c
}

func (_c *EnrichedRoleRepository_Set_Call) Return(_a0 error) *EnrichedRoleRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnrichedRoleRepository_Set_Call) RunAndReturn(run func(context.Context, *model.EnrichedRole, time.Time) error) *EnrichedRoleRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnrichedRoleRepository creates a new instance of EnrichedRoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnrichedRoleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnrichedRoleRepository {
	mock := &EnrichedRoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
