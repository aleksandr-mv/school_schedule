// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/rbac/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRoleServiceInterface is an autogenerated mock type for the UserRoleServiceInterface type
type UserRoleServiceInterface struct {
	mock.Mock
}

type UserRoleServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRoleServiceInterface) EXPECT() *UserRoleServiceInterface_Expecter {
	return &UserRoleServiceInterface_Expecter{mock: &_m.Mock}
}

// Assign provides a mock function with given fields: ctx, userID, roleID, assignedBy
func (_m *UserRoleServiceInterface) Assign(ctx context.Context, userID string, roleID string, assignedBy *string) error {
	ret := _m.Called(ctx, userID, roleID, assignedBy)

	if len(ret) == 0 {
		panic("no return value specified for Assign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, userID, roleID, assignedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRoleServiceInterface_Assign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assign'
type UserRoleServiceInterface_Assign_Call struct {
	*mock.Call
}

// Assign is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleID string
//   - assignedBy *string
func (_e *UserRoleServiceInterface_Expecter) Assign(ctx interface{}, userID interface{}, roleID interface{}, assignedBy interface{}) *UserRoleServiceInterface_Assign_Call {
	return &UserRoleServiceInterface_Assign_Call{Call: _e.mock.On("Assign", ctx, userID, roleID, assignedBy)}
}

func (_c *UserRoleServiceInterface_Assign_Call) Run(run func(ctx context.Context, userID string, roleID string, assignedBy *string)) *UserRoleServiceInterface_Assign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *UserRoleServiceInterface_Assign_Call) Return(_a0 error) *UserRoleServiceInterface_Assign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRoleServiceInterface_Assign_Call) RunAndReturn(run func(context.Context, string, string, *string) error) *UserRoleServiceInterface_Assign_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleUsers provides a mock function with given fields: ctx, roleID, limit, cursor
func (_m *UserRoleServiceInterface) GetRoleUsers(ctx context.Context, roleID string, limit int32, cursor string) ([]string, *string, error) {
	ret := _m.Called(ctx, roleID, limit, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleUsers")
	}

	var r0 []string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) ([]string, *string, error)); ok {
		return rf(ctx, roleID, limit, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) []string); ok {
		r0 = rf(ctx, roleID, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, string) *string); ok {
		r1 = rf(ctx, roleID, limit, cursor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int32, string) error); ok {
		r2 = rf(ctx, roleID, limit, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRoleServiceInterface_GetRoleUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleUsers'
type UserRoleServiceInterface_GetRoleUsers_Call struct {
	*mock.Call
}

// GetRoleUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - limit int32
//   - cursor string
func (_e *UserRoleServiceInterface_Expecter) GetRoleUsers(ctx interface{}, roleID interface{}, limit interface{}, cursor interface{}) *UserRoleServiceInterface_GetRoleUsers_Call {
	return &UserRoleServiceInterface_GetRoleUsers_Call{Call: _e.mock.On("GetRoleUsers", ctx, roleID, limit, cursor)}
}

func (_c *UserRoleServiceInterface_GetRoleUsers_Call) Run(run func(ctx context.Context, roleID string, limit int32, cursor string)) *UserRoleServiceInterface_GetRoleUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(string))
	})
	return _c
}

func (_c *UserRoleServiceInterface_GetRoleUsers_Call) Return(_a0 []string, _a1 *string, _a2 error) *UserRoleServiceInterface_GetRoleUsers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRoleServiceInterface_GetRoleUsers_Call) RunAndReturn(run func(context.Context, string, int32, string) ([]string, *string, error)) *UserRoleServiceInterface_GetRoleUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *UserRoleServiceInterface) GetUserRoles(ctx context.Context, userID string) ([]*model.EnrichedRole, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []*model.EnrichedRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.EnrichedRole, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.EnrichedRole); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EnrichedRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleServiceInterface_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type UserRoleServiceInterface_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRoleServiceInterface_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *UserRoleServiceInterface_GetUserRoles_Call {
	return &UserRoleServiceInterface_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *UserRoleServiceInterface_GetUserRoles_Call) Run(run func(ctx context.Context, userID string)) *UserRoleServiceInterface_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRoleServiceInterface_GetUserRoles_Call) Return(_a0 []*model.EnrichedRole, _a1 error) *UserRoleServiceInterface_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRoleServiceInterface_GetUserRoles_Call) RunAndReturn(run func(context.Context, string) ([]*model.EnrichedRole, error)) *UserRoleServiceInterface_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: ctx, userID, roleID
func (_m *UserRoleServiceInterface) Revoke(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRoleServiceInterface_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type UserRoleServiceInterface_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleID string
func (_e *UserRoleServiceInterface_Expecter) Revoke(ctx interface{}, userID interface{}, roleID interface{}) *UserRoleServiceInterface_Revoke_Call {
	return &UserRoleServiceInterface_Revoke_Call{Call: _e.mock.On("Revoke", ctx, userID, roleID)}
}

func (_c *UserRoleServiceInterface_Revoke_Call) Run(run func(ctx context.Context, userID string, roleID string)) *UserRoleServiceInterface_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRoleServiceInterface_Revoke_Call) Return(_a0 error) *UserRoleServiceInterface_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRoleServiceInterface_Revoke_Call) RunAndReturn(run func(context.Context, string, string) error) *UserRoleServiceInterface_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRoleServiceInterface creates a new instance of UserRoleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRoleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRoleServiceInterface {
	mock := &UserRoleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
