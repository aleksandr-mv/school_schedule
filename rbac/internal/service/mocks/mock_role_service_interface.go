// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/rbac/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RoleServiceInterface is an autogenerated mock type for the RoleServiceInterface type
type RoleServiceInterface struct {
	mock.Mock
}

type RoleServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleServiceInterface) EXPECT() *RoleServiceInterface_Expecter {
	return &RoleServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateRole provides a mock function with given fields: ctx, createRole
func (_m *RoleServiceInterface) CreateRole(ctx context.Context, createRole *model.CreateRole) (uuid.UUID, error) {
	ret := _m.Called(ctx, createRole)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateRole) (uuid.UUID, error)); ok {
		return rf(ctx, createRole)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateRole) uuid.UUID); ok {
		r0 = rf(ctx, createRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateRole) error); ok {
		r1 = rf(ctx, createRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleServiceInterface_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type RoleServiceInterface_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - createRole *model.CreateRole
func (_e *RoleServiceInterface_Expecter) CreateRole(ctx interface{}, createRole interface{}) *RoleServiceInterface_CreateRole_Call {
	return &RoleServiceInterface_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, createRole)}
}

func (_c *RoleServiceInterface_CreateRole_Call) Run(run func(ctx context.Context, createRole *model.CreateRole)) *RoleServiceInterface_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CreateRole))
	})
	return _c
}

func (_c *RoleServiceInterface_CreateRole_Call) Return(_a0 uuid.UUID, _a1 error) *RoleServiceInterface_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleServiceInterface_CreateRole_Call) RunAndReturn(run func(context.Context, *model.CreateRole) (uuid.UUID, error)) *RoleServiceInterface_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *RoleServiceInterface) DeleteRole(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleServiceInterface_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type RoleServiceInterface_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RoleServiceInterface_Expecter) DeleteRole(ctx interface{}, id interface{}) *RoleServiceInterface_DeleteRole_Call {
	return &RoleServiceInterface_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, id)}
}

func (_c *RoleServiceInterface_DeleteRole_Call) Run(run func(ctx context.Context, id string)) *RoleServiceInterface_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleServiceInterface_DeleteRole_Call) Return(_a0 error) *RoleServiceInterface_DeleteRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleServiceInterface_DeleteRole_Call) RunAndReturn(run func(context.Context, string) error) *RoleServiceInterface_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: ctx, value
func (_m *RoleServiceInterface) GetRole(ctx context.Context, value string) (*model.Role, error) {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 *model.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Role, error)); ok {
		return rf(ctx, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Role); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleServiceInterface_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type RoleServiceInterface_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - ctx context.Context
//   - value string
func (_e *RoleServiceInterface_Expecter) GetRole(ctx interface{}, value interface{}) *RoleServiceInterface_GetRole_Call {
	return &RoleServiceInterface_GetRole_Call{Call: _e.mock.On("GetRole", ctx, value)}
}

func (_c *RoleServiceInterface_GetRole_Call) Run(run func(ctx context.Context, value string)) *RoleServiceInterface_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleServiceInterface_GetRole_Call) Return(_a0 *model.Role, _a1 error) *RoleServiceInterface_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleServiceInterface_GetRole_Call) RunAndReturn(run func(context.Context, string) (*model.Role, error)) *RoleServiceInterface_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: ctx, nameFilter
func (_m *RoleServiceInterface) ListRoles(ctx context.Context, nameFilter string) ([]*model.Role, error) {
	ret := _m.Called(ctx, nameFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []*model.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Role, error)); ok {
		return rf(ctx, nameFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Role); ok {
		r0 = rf(ctx, nameFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleServiceInterface_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type RoleServiceInterface_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - nameFilter string
func (_e *RoleServiceInterface_Expecter) ListRoles(ctx interface{}, nameFilter interface{}) *RoleServiceInterface_ListRoles_Call {
	return &RoleServiceInterface_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx, nameFilter)}
}

func (_c *RoleServiceInterface_ListRoles_Call) Run(run func(ctx context.Context, nameFilter string)) *RoleServiceInterface_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoleServiceInterface_ListRoles_Call) Return(_a0 []*model.Role, _a1 error) *RoleServiceInterface_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleServiceInterface_ListRoles_Call) RunAndReturn(run func(context.Context, string) ([]*model.Role, error)) *RoleServiceInterface_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: ctx, updateRole
func (_m *RoleServiceInterface) UpdateRole(ctx context.Context, updateRole *model.UpdateRole) error {
	ret := _m.Called(ctx, updateRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateRole) error); ok {
		r0 = rf(ctx, updateRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleServiceInterface_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type RoleServiceInterface_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - updateRole *model.UpdateRole
func (_e *RoleServiceInterface_Expecter) UpdateRole(ctx interface{}, updateRole interface{}) *RoleServiceInterface_UpdateRole_Call {
	return &RoleServiceInterface_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, updateRole)}
}

func (_c *RoleServiceInterface_UpdateRole_Call) Run(run func(ctx context.Context, updateRole *model.UpdateRole)) *RoleServiceInterface_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UpdateRole))
	})
	return _c
}

func (_c *RoleServiceInterface_UpdateRole_Call) Return(_a0 error) *RoleServiceInterface_UpdateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleServiceInterface_UpdateRole_Call) RunAndReturn(run func(context.Context, *model.UpdateRole) error) *RoleServiceInterface_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleServiceInterface creates a new instance of RoleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleServiceInterface {
	mock := &RoleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
