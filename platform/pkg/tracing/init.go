package tracing

import (
	"context"
	"sync"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.30.0"
	"go.uber.org/zap"

	"github.com/aleksandr-mv/school_schedule/platform/pkg/logger"
)

// Tracing —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏ –µ—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
type Tracing struct {
	initOnce       sync.Once
	tracerProvider *sdktrace.TracerProvider
	logger         Logger
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
var globalTracing = NewWithLogger(&logger.NoopLogger{})

// SetLogger —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func SetLogger(logger Logger) {
	globalTracing.SetLogger(logger)
}

// NewWithLogger —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Tracing —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º
func NewWithLogger(logger Logger) *Tracing {
	return &Tracing{
		logger: logger,
	}
}

// SetLogger —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è Tracing
func (t *Tracing) SetLogger(logger Logger) {
	t.logger = logger
}

const (
	// DefaultCompressor - –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∂–∞—Ç–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	DefaultCompressor = "gzip"
)

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OpenTelemetry TracerProvider –∏ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func Init(ctx context.Context, opts ...Option) error {
	return globalTracing.Init(ctx, opts...)
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OpenTelemetry TracerProvider –∏ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
func (t *Tracing) Init(ctx context.Context, opts ...Option) error {
	var initErr error

	t.initOnce.Do(func() {
		cfg := defaultConfig()
		for _, opt := range opts {
			opt(cfg)
		}

		if !cfg.enable {
			return // –¢—Ä–µ–π—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω - tracerProvider –æ—Å—Ç–∞–µ—Ç—Å—è nil
		}

		initErr = t.initTracer(ctx, cfg)
		if initErr != nil {
			return
		}
	})

	return initErr
}

// Reinit —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–π—Å–µ—Ä –∑–∞–Ω–æ–≤–æ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏.
func Reinit(ctx context.Context, opts ...Option) error {
	return globalTracing.Reinit(ctx, opts...)
}

// Reinit —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–π—Å–µ—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
func (t *Tracing) Reinit(ctx context.Context, opts ...Option) error {
	t.initOnce = sync.Once{}
	return t.Init(ctx, opts...)
}

// parseDuration –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ time.Duration —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
func ParseDuration(s string, defaultValue time.Duration) time.Duration {
	d, err := time.ParseDuration(s)
	if err != nil {
		return defaultValue
	}
	return d
}

// initTracer –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
func (t *Tracing) initTracer(ctx context.Context, cfg *Config) error {
	// 1. –°–æ–∑–¥–∞–µ–º OTLP gRPC —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–π—Å–æ–≤ –≤ OpenTelemetry Collector
	t.logger.Info(ctx, "üîç [Tracing] –°–æ–∑–¥–∞–Ω–∏–µ OTLP —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞", zap.String("endpoint", cfg.endpoint))

	exporter, err := otlptracegrpc.New(
		ctx,
		otlptracegrpc.WithEndpoint(cfg.endpoint), // –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
		otlptracegrpc.WithInsecure(),             // –û—Ç–∫–ª—é—á–∞–µ–º TLS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
		otlptracegrpc.WithTimeout(cfg.timeout),
		otlptracegrpc.WithCompressor(DefaultCompressor),
		otlptracegrpc.WithRetry(otlptracegrpc.RetryConfig{
			Enabled:         cfg.retryEnabled,
			InitialInterval: cfg.retryInitialInterval,
			MaxInterval:     cfg.retryMaxInterval,
			MaxElapsedTime:  cfg.retryMaxElapsedTime,
		}),
	)
	if err != nil {
		t.logger.Error(ctx, "‚ùå [Tracing] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OTLP —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞", zap.Error(err))
		return err
	}

	// 2. –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
	t.logger.Info(ctx, "üîç [Tracing] –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞",
		zap.String("service.name", cfg.name),
		zap.String("service.version", cfg.version),
		zap.String("deployment.environment", cfg.environment))

	attributeResource, err := resource.New(ctx,
		resource.WithAttributes(
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã OpenTelemetry
			semconv.ServiceName(cfg.name),
			semconv.ServiceVersion(cfg.version),
			attribute.String("environment", cfg.environment),
		),
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç, –û–° –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
		resource.WithHost(),
		resource.WithOS(),
		resource.WithProcess(),
		resource.WithContainer(),
		resource.WithTelemetrySDK(),
	)
	if err != nil {
		t.logger.Error(ctx, "‚ùå [Tracing] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞", zap.Error(err))
		return err
	}

	// 3. –°–æ–∑–¥–∞–µ–º TracerProvider —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–º
	t.logger.Info(ctx, "üîç [Tracing] –°–æ–∑–¥–∞–Ω–∏–µ TracerProvider", zap.Int("sample_ratio", cfg.sampleRatio))

	t.tracerProvider = sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exporter),
		sdktrace.WithResource(attributeResource),
		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π—Å–æ–≤:
		// 1. ParentBased - —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∞–Ω–∞
		// 2. TraceIDRatioBased - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—å—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç (0.1 = 10%)
		// –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
		sdktrace.WithSampler(sdktrace.ParentBased(sdktrace.TraceIDRatioBased(float64(cfg.sampleRatio)/100.0))),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤
	otel.SetTracerProvider(t.tracerProvider)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–ø–∞–≥–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏:
	// 1. TraceContext - —Å—Ç–∞–Ω–¥–∞—Ä—Ç W3C –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ trace ID –∏ parent span ID —á–µ—Ä–µ–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
	//    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤—è–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ –≤ –µ–¥–∏–Ω—ã–π —Ç—Ä–µ–π—Å
	// 2. Baggage - –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
	//    –ù–∞–ø—Ä–∏–º–µ—Ä: user_id, tenant_id, request_id –∏ –¥—Ä—É–≥–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
	// –ü—Ä–æ–ø–∞–≥–∞—Ü–∏—è - —ç—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
	// –ö–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤, –ø—Ä–æ–ø–∞–≥–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:
	// - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–ø–∞–Ω–∞–º–∏ –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–∑–æ–≤–æ–≤
	// - –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
	// - –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–∫–≤–æ–∑–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

	var propagators []propagation.TextMapPropagator

	if cfg.enableTraceContext {
		propagators = append(propagators, propagation.TraceContext{})
	}

	if cfg.enableBaggage {
		propagators = append(propagators, propagation.Baggage{})
	}

	if len(propagators) == 0 {
		propagators = append(propagators, propagation.TraceContext{})
	}

	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagators...))

	t.logger.Info(ctx, "‚úÖ [Tracing] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

	return nil
}

// GetTracerProvider –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤
func GetTracerProvider() *sdktrace.TracerProvider {
	return globalTracing.GetTracerProvider()
}

// GetTracerProvider –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
func (t *Tracing) GetTracerProvider() *sdktrace.TracerProvider {
	if t.tracerProvider == nil {
		return sdktrace.NewTracerProvider()
	}
	return t.tracerProvider
}

// Shutdown –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
func Shutdown(ctx context.Context, timeout time.Duration) error {
	return globalTracing.Shutdown(ctx, timeout)
}

// Shutdown –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
func (t *Tracing) Shutdown(ctx context.Context, timeout time.Duration) error {
	if t.tracerProvider == nil {
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è shutdown
	shutdownCtx, cancel := context.WithTimeout(ctx, timeout)
	defer cancel()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç—Ä–µ–π—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
	err := t.tracerProvider.Shutdown(shutdownCtx)
	if err != nil {
		return err
	}

	t.tracerProvider = nil

	return nil
}
