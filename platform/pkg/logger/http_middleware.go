package logger

import (
	"net/http"
	"time"

	"go.uber.org/zap"
)

// HTTPMiddleware —Å–æ–∑–¥–∞–µ—Ç HTTP middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
// Middleware –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü HTTP-–∑–∞–ø—Ä–æ—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏.
func HTTPMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		Info(ctx, "üöÄ [HTTP] –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç",
			zap.String("method", r.Method),
			zap.String("path", r.URL.Path),
		)

		startTime := time.Now()
		sr := &statusRecorder{ResponseWriter: w, status: http.StatusOK}
		next.ServeHTTP(sr, r)
		duration := time.Since(startTime)

		if sr.status >= 400 {
			Error(ctx, "‚ùå [HTTP] –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π",
				zap.String("method", r.Method),
				zap.String("path", r.URL.Path),
				zap.Int("status", sr.status),
				zap.Duration("duration", duration),
			)
		} else {
			Info(ctx, "‚úÖ [HTTP] –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω",
				zap.String("method", r.Method),
				zap.String("path", r.URL.Path),
				zap.Int("status", sr.status),
				zap.Duration("duration", duration),
			)
		}
	})
}

// statusRecorder –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç http.ResponseWriter –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
type statusRecorder struct {
	http.ResponseWriter
	status int
	bytes  int
}

func (sr *statusRecorder) WriteHeader(code int) {
	sr.status = code
	sr.ResponseWriter.WriteHeader(code)
}

func (sr *statusRecorder) Write(b []byte) (int, error) {
	n, err := sr.ResponseWriter.Write(b)
	sr.bytes += n
	return n, err
}
