// Package config –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤.
//
// –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö:
// - –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–∞–∫–µ—Ç–µ
// - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–∞–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –∏ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
// - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ contracts
// - –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ loader'–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
//
// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª–µ–π:
// - Network:   CORS + TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// - Transport: HTTP + gRPC —Å–µ—Ä–≤–µ—Ä—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã
// - App:       –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// - Database:  PostgreSQL + MongoDB
// - Services:  –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
// - Kafka:     Apache Kafka –±—Ä–æ–∫–µ—Ä—ã –∏ —Ç–æ–ø–∏–∫–∏
//
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (API –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):
//
//	cfg, err := config.Load(ctx)
//	if err != nil { panic(err) }
//	httpServer := cfg.HTTP()     // –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
//	dbConfig := cfg.DatabaseConfig()
package config

import (
	"context"
	"fmt"

	"go.uber.org/zap"

	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/contracts"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/helpers"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/app"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/database"
	kafkamodule "github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/kafka"
	loggermodule "github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/logger"
	metricmodule "github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/metric"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/network"
	redismodule "github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/redis"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/services"
	sessionmodule "github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/session"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/telegram"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/tracing"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/config/internal/transport"
	"github.com/aleksandr-mv/school_schedule/platform/pkg/logger"
)

// =============================================================================
// –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// =============================================================================

// config —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å contracts.Provider —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
// –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π.
type config struct {
	networkConfig   contracts.NetworkConfig   // –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (CORS, TLS)
	transportConfig contracts.TransportModule // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (HTTP, gRPC)
	appModule       contracts.AppModule       // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	loggerModule    contracts.LoggerModule    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	dbConfig        contracts.DatabaseConfig  // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL, MongoDB)
	servicesConfig  contracts.ServicesConfig  // –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
	kafkaConfig     contracts.KafkaConfig     // Apache Kafka
	telegramConfig  contracts.TelegramConfig  // Telegram Bot
	redisConfig     contracts.RedisConfig     // Redis –∫—ç—à –∏ —Å–µ—Å—Å–∏–∏
	sessionConfig   contracts.SessionConfig   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
	tracingModule   contracts.TracingModule   // –¢—Ä–µ–π—Å–∏–Ω–≥ OpenTelemetry
	metricModule    contracts.MetricModule    // –ú–µ—Ç—Ä–∏–∫–∏ OpenTelemetry
}

// =============================================================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// =============================================================================

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Viper –¥–ª—è —á—Ç–µ–Ω–∏—è YAML –∏ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
// 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ –∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã New()
// 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
// 4. –°–±–æ—Ä–∫–∞ –µ–¥–∏–Ω–æ–≥–æ Provider –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// 5. –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API

// Load –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
// –í–Ω–µ—à–Ω–∏–π API –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.
func Load(ctx context.Context) (contracts.Provider, error) {
	path := helpers.ResolveConfigPath("config/development.yaml")
	logger.Info(ctx, "üîç [Config] –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", zap.String("path", path))

	if err := helpers.InitViper(path); err != nil {
		logger.Warn(ctx, "‚ö†Ô∏è [Config] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å YAML, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ENV",
			zap.String("path", path), zap.Error(err))
	}

	cfg, err := buildModularConfig()
	if err != nil {
		return nil, err
	}

	logger.Info(ctx, "‚úÖ [Config] –ú–æ–¥—É–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	return cfg, nil
}

// =============================================================================
// –ü–†–ò–í–ê–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–£–õ–¨–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// =============================================================================

// buildModularConfig —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
// –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
// –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à—É—é –∏–∑–æ–ª—è—Ü–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
func buildModularConfig() (*config, error) {
	// Network –º–æ–¥—É–ª—å (CORS + –±—É–¥—É—â–∏–π TLS)
	networkCfg, err := network.New()
	if err != nil {
		return nil, fmt.Errorf("initializing network module: %w", err)
	}

	// Transport –º–æ–¥—É–ª—å (HTTP + gRPC —Å–µ—Ä–≤–µ—Ä—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã)
	transportCfg, err := transport.New()
	if err != nil {
		return nil, fmt.Errorf("initializing transport module: %w", err)
	}

	// App –º–æ–¥—É–ª—å (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
	appCfg, err := app.New()
	if err != nil {
		return nil, fmt.Errorf("initializing app module: %w", err)
	}

	// Logger –º–æ–¥—É–ª—å (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
	loggerCfg, err := loggermodule.New()
	if err != nil {
		return nil, fmt.Errorf("initializing logger module: %w", err)
	}

	// Database –º–æ–¥—É–ª—å (PostgreSQL + MongoDB –∞–≥—Ä–µ–≥–∞—Ü–∏—è)
	dbCfg, err := database.New()
	if err != nil {
		return nil, fmt.Errorf("initializing database module: %w", err)
	}

	// Services –º–æ–¥—É–ª—å (–≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã)
	servicesCfg, err := services.New()
	if err != nil {
		return nil, fmt.Errorf("initializing services module: %w", err)
	}

	// Kafka –º–æ–¥—É–ª—å (Apache Kafka)
	kafkaCfg, err := kafkamodule.NewKafkaConfig()
	if err != nil {
		return nil, fmt.Errorf("initializing kafka module: %w", err)
	}

	// Telegram –º–æ–¥—É–ª—å (Telegram Bot)
	telegramCfg, err := telegram.New()
	if err != nil {
		return nil, fmt.Errorf("initializing telegram module: %w", err)
	}

	// Redis –º–æ–¥—É–ª—å (Redis –∫—ç—à –∏ —Å–µ—Å—Å–∏–∏)
	redisCfg, err := redismodule.New()
	if err != nil {
		return nil, fmt.Errorf("initializing redis module: %w", err)
	}

	// Session –º–æ–¥—É–ª—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π)
	sessionCfg, err := sessionmodule.NewSessionConfig()
	if err != nil {
		return nil, fmt.Errorf("initializing session module: %w", err)
	}

	// Tracing –º–æ–¥—É–ª—å (OpenTelemetry —Ç—Ä–µ–π—Å–∏–Ω–≥)
	tracingCfg, err := tracing.New()
	if err != nil {
		return nil, fmt.Errorf("initializing tracing module: %w", err)
	}

	// Metric –º–æ–¥—É–ª—å (OpenTelemetry –º–µ—Ç—Ä–∏–∫–∏)
	metricCfg, err := metricmodule.New()
	if err != nil {
		return nil, fmt.Errorf("initializing metric module: %w", err)
	}

	return &config{
		networkConfig:   networkCfg,
		transportConfig: transportCfg,
		appModule:       appCfg,
		loggerModule:    loggerCfg,
		dbConfig:        dbCfg,
		servicesConfig:  servicesCfg,
		kafkaConfig:     kafkaCfg,
		telegramConfig:  telegramCfg,
		redisConfig:     redisCfg,
		sessionConfig:   sessionCfg,
		tracingModule:   tracingCfg,
		metricModule:    metricCfg,
	}, nil
}

// =============================================================================
// –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê contracts.Provider
// =============================================================================

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ Provider –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
// –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–µ—Ä—Ç–æ–∫.
//
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
//   cfg := config.Load(ctx)
//   httpConfig := cfg.Transport().HTTP()
//   corsConfig := cfg.Network().CORS()
//   loggerLevel := cfg.Logger().LoggerLevel()
//   dbConfig := cfg.Database()
//
//   // Kafka –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
//   if cfg.Kafka().IsEnabled() {
//       kafkaBrokers := cfg.Kafka().Brokers()
//   }

// =============================================================================
// –ú–û–î–£–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø PROVIDER –ò–ù–¢–ï–†–§–ï–ô–°–ê
// =============================================================================

// Network –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥—É–ª—å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (CORS, TLS)
func (c *config) Network() contracts.NetworkConfig {
	return c.networkConfig
}

// Transport –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ (HTTP, gRPC)
func (c *config) Transport() contracts.TransportModule {
	return c.transportConfig
}

// App –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (c *config) App() contracts.AppModule {
	return c.appModule
}

// Logger –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func (c *config) Logger() contracts.LoggerModule {
	return c.loggerModule
}

// Database –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
func (c *config) Database() contracts.DatabaseConfig {
	return c.dbConfig
}

// Services –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
func (c *config) Services() contracts.ServicesConfig {
	return c.servicesConfig
}

// Kafka –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Apache Kafka
func (c *config) Kafka() contracts.KafkaConfig {
	return c.kafkaConfig
}

// Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram Bot
func (c *config) Telegram() contracts.TelegramConfig {
	return c.telegramConfig
}

// Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis
func (c *config) Redis() contracts.RedisConfig {
	return c.redisConfig
}

// Session –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–π
func (c *config) Session() contracts.SessionConfig {
	return c.sessionConfig
}

// Tracing –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ OpenTelemetry
func (c *config) Tracing() contracts.TracingModule {
	return c.tracingModule
}

// Metric –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫ OpenTelemetry
func (c *config) Metric() contracts.MetricModule {
	return c.metricModule
}
