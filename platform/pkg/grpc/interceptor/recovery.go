package interceptor

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/status"

	"github.com/aleksandr-mv/school_schedule/platform/pkg/logger"
)

// RecoveryInterceptor Ð¿ÐµÑ€ÐµÑ…Ð²Ð°Ñ‚Ñ‹Ð²Ð°ÐµÑ‚ Ð¿Ð°Ð½Ð¸ÐºÐ¸ Ð² unary gRPC-Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ°Ñ… Ð¸ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‰Ð°ÐµÑ‚ Ð²Ð½ÑƒÑ‚Ñ€. Ð¾ÑˆÐ¸Ð±ÐºÑƒ.
func RecoveryInterceptor() grpc.UnaryServerInterceptor {
	return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
		defer func() {
			if r := recover(); r != nil {
				logger.Error(ctx, "ðŸ’¥ [gRPC] Panic Ð² Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐµ",
					zap.Any("panic", r),
					zap.ByteString("stacktrace", debug.Stack()),
				)
				err = status.Errorf(13, "internal server error")
			}
		}()
		return handler(ctx, req)
	}
}
