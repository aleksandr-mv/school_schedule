# ===================================================================
# DOCKER COMPOSE КОНФИГУРАЦИЯ ДЛЯ СИСТЕМЫ ЦЕНТРАЛИЗОВАННОГО ЛОГИРОВАНИЯ
# ===================================================================
# 
# Эта конфигурация поднимает полную инфраструктуру для сбора, хранения 
# и визуализации логов от микросервисов через OpenTelemetry.
#
# АРХИТЕКТУРА ЛОГИРОВАНИЯ:
# Go App → OpenTelemetry Collector → Elasticsearch → Kibana
#
# Порты:
# - 9200: Elasticsearch (REST API)
# - 5601: Kibana (веб-интерфейс)

services: 
  elasticsearch:
    image: elasticsearch:9.0.4
    container_name: elasticsearch
    env_file:
      - .env
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${ELASTICSEARCH_PORT:-9200}/_cluster/health >/dev/null"]
      interval: ${ELASTICSEARCH_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${ELASTICSEARCH_HEALTHCHECK_TIMEOUT:-5s}
      retries: ${ELASTICSEARCH_HEALTHCHECK_RETRIES:-20}
      start_period: ${ELASTICSEARCH_HEALTHCHECK_START_PERIOD:-30s}
    restart: unless-stopped
    networks:
      - school_net


  kibana:
    image: kibana:9.0.4
    container_name: kibana
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${KIBANA_PORT:-5601}/api/status >/dev/null"]
      interval: ${KIBANA_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${KIBANA_HEALTHCHECK_TIMEOUT:-5s}
      retries: ${KIBANA_HEALTHCHECK_RETRIES:-20}
      start_period: ${KIBANA_HEALTHCHECK_START_PERIOD:-30s}
    restart: unless-stopped
    networks:
      - school_net

  kibana-init:
    image: alpine:3.20
    container_name: kibana-init
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - school_net
    restart: "no"
    command: 
      - sh      # запускаем shell
      - -c      # выполняем команду из строки
      - |       # многострочная команда (YAML literal block)
        set -e  # останавливаем скрипт при первой ошибке
        
        # УСТАНОВКА УТИЛИТ: curl для HTTP запросов, jq для обработки JSON
        echo "Installing curl and jq..."
        apk add --no-cache curl jq >/dev/null 2>&1
        
        # ОЖИДАНИЕ ГОТОВНОСТИ KIBANA: дополнительная проверка доступности API
        echo "Waiting for Kibana..."
        for i in $$(seq 1 60); do  # максимум 60 попыток (2 минуты)
          if curl -sSf http://kibana:5601/api/status >/dev/null; then break; fi
          sleep 2  # ждем 2 секунды между попытками
        done
        
        # СОЗДАНИЕ DATA VIEWS ДЛЯ НАШИХ СЕРВИСОВ
        echo "Creating Data Views for microservices..."
        
        # Создаем Data View для всех логов (logs-*)
        echo "Creating Data View logs-* ..."
        RESPONSE=$$(curl -sS -X POST http://kibana:5601/api/data_views/data_view \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          --data '{"data_view":{"title":"logs-*","name":"All Logs","timeFieldName":"@timestamp","allowNoIndex":true},"override":true}' || echo "{}")
        
        # ИЗВЛЕЧЕНИЕ ID DATA VIEW: парсим JSON ответ для получения ID
        echo "Response: $$RESPONSE"
        DATA_VIEW_ID=$$(echo "$$RESPONSE" | jq -r ".data_view.id // empty")
        echo "Data View ID: $$DATA_VIEW_ID"
        
        # УСТАНОВКА КАК DEFAULT DATA VIEW: чтобы Kibana автоматически использовал его
        if [ -n "$$DATA_VIEW_ID" ]; then
          echo "Setting as default data view..."
          curl -sS -X POST http://kibana:5601/api/data_views/default \
            -H "kbn-xsrf: true" \
            -H "Content-Type: application/json" \
            -d "{\"data_view_id\": \"$$DATA_VIEW_ID\", \"force\": true}" || true
          echo "Default data view set successfully."
        else
          echo "Failed to get data view ID"
        fi
        
        # СОЗДАНИЕ DATA VIEW ДЛЯ IAM СЕРВИСА
        echo "Creating Data View for IAM service..."
        curl -sS -X POST http://kibana:5601/api/data_views/data_view \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          --data '{"data_view":{"title":"logs-iam-*","name":"IAM Service Logs","timeFieldName":"@timestamp","allowNoIndex":true},"override":true}' || true
        
        echo "IAM service Data View created successfully."
        echo "Done."


volumes:
  es_data:

networks:
  school_net:
    external: true