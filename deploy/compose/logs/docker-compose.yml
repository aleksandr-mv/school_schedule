# ===================================================================
# DOCKER COMPOSE КОНФИГУРАЦИЯ ДЛЯ СИСТЕМЫ ЦЕНТРАЛИЗОВАННОГО ЛОГИРОВАНИЯ
# ===================================================================
# 
# Эта конфигурация поднимает полную инфраструктуру для сбора, хранения 
# и визуализации логов от микросервисов через OpenTelemetry.
#
# АРХИТЕКТУРА ЛОГИРОВАНИЯ:
# Go App → OpenTelemetry Collector → Elasticsearch → Kibana
#
# Порты:
# - 9200: Elasticsearch (REST API)
# - 5601: Kibana (веб-интерфейс)

services: 
  elasticsearch:
    image: elasticsearch:9.0.4
    container_name: elasticsearch
    env_file:
      - .env
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${ELASTICSEARCH_PORT}/_cluster/health >/dev/null"]
      interval: ${ELASTICSEARCH_HEALTHCHECK_INTERVAL}
      timeout: ${ELASTICSEARCH_HEALTHCHECK_TIMEOUT}
      retries: ${ELASTICSEARCH_HEALTHCHECK_RETRIES}
      start_period: ${ELASTICSEARCH_HEALTHCHECK_START_PERIOD}
    restart: unless-stopped
    networks:
      - school_net


  kibana:
    image: kibana:9.0.4
    container_name: kibana
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${KIBANA_PORT}:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${KIBANA_PORT}/api/status >/dev/null"]
      interval: ${KIBANA_HEALTHCHECK_INTERVAL}
      timeout: ${KIBANA_HEALTHCHECK_TIMEOUT}
      retries: ${KIBANA_HEALTHCHECK_RETRIES}
      start_period: ${KIBANA_HEALTHCHECK_START_PERIOD}
    restart: unless-stopped
    networks:
      - school_net

volumes:
  es_data:

networks:
  school_net:
    external: true