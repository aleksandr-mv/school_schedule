// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/aleksandr-mv/school_schedule/iam/internal/model"

	uuid "github.com/google/uuid"
)

// RBACClient is an autogenerated mock type for the RBACClient type
type RBACClient struct {
	mock.Mock
}

type RBACClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RBACClient) EXPECT() *RBACClient_Expecter {
	return &RBACClient_Expecter{mock: &_m.Mock}
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *RBACClient) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*model.RoleWithPermissions, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []*model.RoleWithPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.RoleWithPermissions, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.RoleWithPermissions); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RoleWithPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RBACClient_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type RBACClient_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *RBACClient_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *RBACClient_GetUserRoles_Call {
	return &RBACClient_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *RBACClient_GetUserRoles_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *RBACClient_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RBACClient_GetUserRoles_Call) Return(_a0 []*model.RoleWithPermissions, _a1 error) *RBACClient_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RBACClient_GetUserRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*model.RoleWithPermissions, error)) *RBACClient_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewRBACClient creates a new instance of RBACClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRBACClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RBACClient {
	mock := &RBACClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
