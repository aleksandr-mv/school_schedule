// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/iam/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserService) GetUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserService_Expecter) GetUser(ctx interface{}, id interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 *model.User, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *UserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, createUser
func (_m *UserService) Register(ctx context.Context, createUser *model.CreateUser) (*model.User, error) {
	ret := _m.Called(ctx, createUser)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUser) (*model.User, error)); ok {
		return rf(ctx, createUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUser) *model.User); ok {
		r0 = rf(ctx, createUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateUser) error); ok {
		r1 = rf(ctx, createUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - createUser *model.CreateUser
func (_e *UserService_Expecter) Register(ctx interface{}, createUser interface{}) *UserService_Register_Call {
	return &UserService_Register_Call{Call: _e.mock.On("Register", ctx, createUser)}
}

func (_c *UserService_Register_Call) Run(run func(ctx context.Context, createUser *model.CreateUser)) *UserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CreateUser))
	})
	return _c
}

func (_c *UserService_Register_Call) Return(_a0 *model.User, _a1 error) *UserService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Register_Call) RunAndReturn(run func(context.Context, *model.CreateUser) (*model.User, error)) *UserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
