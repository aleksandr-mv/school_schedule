// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexander-Mandzhiev/school_schedule/iam/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

type AuthServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceInterface) EXPECT() *AuthServiceInterface_Expecter {
	return &AuthServiceInterface_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, credentials
func (_m *AuthServiceInterface) Login(ctx context.Context, credentials *model.LoginCredentials) (uuid.UUID, error) {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginCredentials) (uuid.UUID, error)); ok {
		return rf(ctx, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginCredentials) uuid.UUID); ok {
		r0 = rf(ctx, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginCredentials) error); ok {
		r1 = rf(ctx, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthServiceInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - credentials *model.LoginCredentials
func (_e *AuthServiceInterface_Expecter) Login(ctx interface{}, credentials interface{}) *AuthServiceInterface_Login_Call {
	return &AuthServiceInterface_Login_Call{Call: _e.mock.On("Login", ctx, credentials)}
}

func (_c *AuthServiceInterface_Login_Call) Run(run func(ctx context.Context, credentials *model.LoginCredentials)) *AuthServiceInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.LoginCredentials))
	})
	return _c
}

func (_c *AuthServiceInterface_Login_Call) Return(_a0 uuid.UUID, _a1 error) *AuthServiceInterface_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceInterface_Login_Call) RunAndReturn(run func(context.Context, *model.LoginCredentials) (uuid.UUID, error)) *AuthServiceInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, sessionID
func (_m *AuthServiceInterface) Logout(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceInterface_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthServiceInterface_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *AuthServiceInterface_Expecter) Logout(ctx interface{}, sessionID interface{}) *AuthServiceInterface_Logout_Call {
	return &AuthServiceInterface_Logout_Call{Call: _e.mock.On("Logout", ctx, sessionID)}
}

func (_c *AuthServiceInterface_Logout_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *AuthServiceInterface_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthServiceInterface_Logout_Call) Return(_a0 error) *AuthServiceInterface_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceInterface_Logout_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *AuthServiceInterface_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Whoami provides a mock function with given fields: ctx, sessionID
func (_m *AuthServiceInterface) Whoami(ctx context.Context, sessionID uuid.UUID) (*model.WhoAMI, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Whoami")
	}

	var r0 *model.WhoAMI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.WhoAMI, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.WhoAMI); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WhoAMI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceInterface_Whoami_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Whoami'
type AuthServiceInterface_Whoami_Call struct {
	*mock.Call
}

// Whoami is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *AuthServiceInterface_Expecter) Whoami(ctx interface{}, sessionID interface{}) *AuthServiceInterface_Whoami_Call {
	return &AuthServiceInterface_Whoami_Call{Call: _e.mock.On("Whoami", ctx, sessionID)}
}

func (_c *AuthServiceInterface_Whoami_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *AuthServiceInterface_Whoami_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthServiceInterface_Whoami_Call) Return(_a0 *model.WhoAMI, _a1 error) *AuthServiceInterface_Whoami_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceInterface_Whoami_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.WhoAMI, error)) *AuthServiceInterface_Whoami_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
