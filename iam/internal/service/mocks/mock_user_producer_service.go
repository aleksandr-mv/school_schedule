// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/iam/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserProducerService is an autogenerated mock type for the UserProducerService type
type UserProducerService struct {
	mock.Mock
}

type UserProducerService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProducerService) EXPECT() *UserProducerService_Expecter {
	return &UserProducerService_Expecter{mock: &_m.Mock}
}

// ProduceUserCreated provides a mock function with given fields: ctx, event
func (_m *UserProducerService) ProduceUserCreated(ctx context.Context, event model.UserCreated) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for ProduceUserCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCreated) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserProducerService_ProduceUserCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceUserCreated'
type UserProducerService_ProduceUserCreated_Call struct {
	*mock.Call
}

// ProduceUserCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - event model.UserCreated
func (_e *UserProducerService_Expecter) ProduceUserCreated(ctx interface{}, event interface{}) *UserProducerService_ProduceUserCreated_Call {
	return &UserProducerService_ProduceUserCreated_Call{Call: _e.mock.On("ProduceUserCreated", ctx, event)}
}

func (_c *UserProducerService_ProduceUserCreated_Call) Run(run func(ctx context.Context, event model.UserCreated)) *UserProducerService_ProduceUserCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserCreated))
	})
	return _c
}

func (_c *UserProducerService_ProduceUserCreated_Call) Return(_a0 error) *UserProducerService_ProduceUserCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProducerService_ProduceUserCreated_Call) RunAndReturn(run func(context.Context, model.UserCreated) error) *UserProducerService_ProduceUserCreated_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserProducerService creates a new instance of UserProducerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProducerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProducerService {
	mock := &UserProducerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
