// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexander-Mandzhiev/school_schedule/iam/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

type NotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationRepository) EXPECT() *NotificationRepository_Expecter {
	return &NotificationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, notificationMethod
func (_m *NotificationRepository) Create(ctx context.Context, notificationMethod model.NotificationMethod) (*model.NotificationMethod, error) {
	ret := _m.Called(ctx, notificationMethod)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.NotificationMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NotificationMethod) (*model.NotificationMethod, error)); ok {
		return rf(ctx, notificationMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NotificationMethod) *model.NotificationMethod); ok {
		r0 = rf(ctx, notificationMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NotificationMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NotificationMethod) error); ok {
		r1 = rf(ctx, notificationMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NotificationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationMethod model.NotificationMethod
func (_e *NotificationRepository_Expecter) Create(ctx interface{}, notificationMethod interface{}) *NotificationRepository_Create_Call {
	return &NotificationRepository_Create_Call{Call: _e.mock.On("Create", ctx, notificationMethod)}
}

func (_c *NotificationRepository_Create_Call) Run(run func(ctx context.Context, notificationMethod model.NotificationMethod)) *NotificationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.NotificationMethod))
	})
	return _c
}

func (_c *NotificationRepository_Create_Call) Return(_a0 *model.NotificationMethod, _a1 error) *NotificationRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_Create_Call) RunAndReturn(run func(context.Context, model.NotificationMethod) (*model.NotificationMethod, error)) *NotificationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, providerName
func (_m *NotificationRepository) Delete(ctx context.Context, userID uuid.UUID, providerName string) error {
	ret := _m.Called(ctx, userID, providerName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userID, providerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NotificationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - providerName string
func (_e *NotificationRepository_Expecter) Delete(ctx interface{}, userID interface{}, providerName interface{}) *NotificationRepository_Delete_Call {
	return &NotificationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, providerName)}
}

func (_c *NotificationRepository_Delete_Call) Run(run func(ctx context.Context, userID uuid.UUID, providerName string)) *NotificationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *NotificationRepository_Delete_Call) Return(_a0 error) *NotificationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *NotificationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUser provides a mock function with given fields: ctx, userID
func (_m *NotificationRepository) GetByUser(ctx context.Context, userID uuid.UUID) ([]*model.NotificationMethod, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*model.NotificationMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.NotificationMethod, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.NotificationMethod); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NotificationMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_GetByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUser'
type NotificationRepository_GetByUser_Call struct {
	*mock.Call
}

// GetByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *NotificationRepository_Expecter) GetByUser(ctx interface{}, userID interface{}) *NotificationRepository_GetByUser_Call {
	return &NotificationRepository_GetByUser_Call{Call: _e.mock.On("GetByUser", ctx, userID)}
}

func (_c *NotificationRepository_GetByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *NotificationRepository_GetByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *NotificationRepository_GetByUser_Call) Return(_a0 []*model.NotificationMethod, _a1 error) *NotificationRepository_GetByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_GetByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*model.NotificationMethod, error)) *NotificationRepository_GetByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserAndProvider provides a mock function with given fields: ctx, userID, providerName
func (_m *NotificationRepository) GetByUserAndProvider(ctx context.Context, userID uuid.UUID, providerName string) (*model.NotificationMethod, error) {
	ret := _m.Called(ctx, userID, providerName)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndProvider")
	}

	var r0 *model.NotificationMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*model.NotificationMethod, error)); ok {
		return rf(ctx, userID, providerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *model.NotificationMethod); ok {
		r0 = rf(ctx, userID, providerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NotificationMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, providerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_GetByUserAndProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserAndProvider'
type NotificationRepository_GetByUserAndProvider_Call struct {
	*mock.Call
}

// GetByUserAndProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - providerName string
func (_e *NotificationRepository_Expecter) GetByUserAndProvider(ctx interface{}, userID interface{}, providerName interface{}) *NotificationRepository_GetByUserAndProvider_Call {
	return &NotificationRepository_GetByUserAndProvider_Call{Call: _e.mock.On("GetByUserAndProvider", ctx, userID, providerName)}
}

func (_c *NotificationRepository_GetByUserAndProvider_Call) Run(run func(ctx context.Context, userID uuid.UUID, providerName string)) *NotificationRepository_GetByUserAndProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *NotificationRepository_GetByUserAndProvider_Call) Return(_a0 *model.NotificationMethod, _a1 error) *NotificationRepository_GetByUserAndProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_GetByUserAndProvider_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*model.NotificationMethod, error)) *NotificationRepository_GetByUserAndProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
