// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/aleksandr-mv/school_schedule/iam/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

type SessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepository) EXPECT() *SessionRepository_Expecter {
	return &SessionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user, expiresAt
func (_m *SessionRepository) Create(ctx context.Context, user model.User, expiresAt time.Time) (uuid.UUID, error) {
	ret := _m.Called(ctx, user, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, time.Time) (uuid.UUID, error)); ok {
		return rf(ctx, user, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, time.Time) uuid.UUID); ok {
		r0 = rf(ctx, user, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, time.Time) error); ok {
		r1 = rf(ctx, user, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
//   - expiresAt time.Time
func (_e *SessionRepository_Expecter) Create(ctx interface{}, user interface{}, expiresAt interface{}) *SessionRepository_Create_Call {
	return &SessionRepository_Create_Call{Call: _e.mock.On("Create", ctx, user, expiresAt)}
}

func (_c *SessionRepository_Create_Call) Run(run func(ctx context.Context, user model.User, expiresAt time.Time)) *SessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User), args[2].(time.Time))
	})
	return _c
}

func (_c *SessionRepository_Create_Call) Return(_a0 uuid.UUID, _a1 error) *SessionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepository_Create_Call) RunAndReturn(run func(context.Context, model.User, time.Time) (uuid.UUID, error)) *SessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, sessionID
func (_m *SessionRepository) Delete(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *SessionRepository_Expecter) Delete(ctx interface{}, sessionID interface{}) *SessionRepository_Delete_Call {
	return &SessionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, sessionID)}
}

func (_c *SessionRepository_Delete_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRepository_Delete_Call) Return(_a0 error) *SessionRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SessionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, sessionID
func (_m *SessionRepository) Get(ctx context.Context, sessionID uuid.UUID) (*model.WhoAMI, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.WhoAMI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.WhoAMI, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.WhoAMI); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WhoAMI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SessionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *SessionRepository_Expecter) Get(ctx interface{}, sessionID interface{}) *SessionRepository_Get_Call {
	return &SessionRepository_Get_Call{Call: _e.mock.On("Get", ctx, sessionID)}
}

func (_c *SessionRepository_Get_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRepository_Get_Call) Return(_a0 *model.WhoAMI, _a1 error) *SessionRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.WhoAMI, error)) *SessionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
