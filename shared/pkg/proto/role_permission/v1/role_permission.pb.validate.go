// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: role_permission/v1/role_permission.proto

package role_permission_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _role_permission_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AssignRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssignRequestMultiError, or
// nil if none found.
func (m *AssignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = AssignRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPermissionId()); err != nil {
		err = AssignRequestValidationError{
			field:  "PermissionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignRequestMultiError(errors)
	}

	return nil
}

func (m *AssignRequest) _validateUuid(uuid string) error {
	if matched := _role_permission_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignRequestMultiError is an error wrapping multiple validation errors
// returned by AssignRequest.ValidateAll() if the designated constraints
// aren't met.
type AssignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignRequestMultiError) AllErrors() []error { return m }

// AssignRequestValidationError is the validation error returned by
// AssignRequest.Validate if the designated constraints aren't met.
type AssignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignRequestValidationError) ErrorName() string { return "AssignRequestValidationError" }

// Error satisfies the builtin error interface
func (e AssignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignRequestValidationError{}

// Validate checks the field values on RevokeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevokeRequestMultiError, or
// nil if none found.
func (m *RevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRoleId()); err != nil {
		err = RevokeRequestValidationError{
			field:  "RoleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPermissionId()); err != nil {
		err = RevokeRequestValidationError{
			field:  "PermissionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevokeRequestMultiError(errors)
	}

	return nil
}

func (m *RevokeRequest) _validateUuid(uuid string) error {
	if matched := _role_permission_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RevokeRequestMultiError is an error wrapping multiple validation errors
// returned by RevokeRequest.ValidateAll() if the designated constraints
// aren't met.
type RevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRequestMultiError) AllErrors() []error { return m }

// RevokeRequestValidationError is the validation error returned by
// RevokeRequest.Validate if the designated constraints aren't met.
type RevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRequestValidationError) ErrorName() string { return "RevokeRequestValidationError" }

// Error satisfies the builtin error interface
func (e RevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRequestValidationError{}
