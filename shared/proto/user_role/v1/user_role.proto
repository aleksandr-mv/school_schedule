syntax = "proto3";

package user_role.v1;

import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "common/v1/role.proto";
import "common/v1/annotations.proto";

option go_package = "github.com/aleksandr-mv/school_schedule/shared/pkg/proto/user_role/v1;user_role_v1";

// =============================================================================
// UserRoleService (user_role.v1)
// =============================================================================

service UserRoleService {
  // Назначение роли пользователю (для админки)
  rpc AssignRole(AssignRoleRequest) returns (google.protobuf.Empty) {
    option (common.v1.permission) = "user_role:write";
  }

  // Отзыв роли у пользователя (для админки)
  rpc RevokeRole(RevokeRoleRequest) returns (google.protobuf.Empty) {
    option (common.v1.permission) = "user_role:write";
  }

  // Получение ролей пользователя (для админки)
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (common.v1.permission) = "user_role:read";
  }

  // Получение пользователей роли (для админки)
  rpc GetRoleUsers(GetRoleUsersRequest) returns (GetRoleUsersResponse) {
    option (common.v1.permission) = "user_role:read";
  }
}

// =============================================================================
// Messages
// =============================================================================

// =============================================================================
// AssignRole
// =============================================================================

// Запрос на назначение роли пользователю
message AssignRoleRequest {
  string user_id = 1 [(validate.rules).string.uuid = true];
  string role_id = 2 [(validate.rules).string.uuid = true];
  optional string assigned_by = 3 [(validate.rules).string.uuid = true];
}

// =============================================================================
// RevokeRole
// =============================================================================

// Запрос на отзыв роли у пользователя
message RevokeRoleRequest {
  string user_id = 1 [(validate.rules).string.uuid = true];
  string role_id = 2 [(validate.rules).string.uuid = true];
}

// =============================================================================
// GetUserRoles
// =============================================================================

// Запрос на получение ролей пользователя
message GetUserRolesRequest {
  string user_id = 1 [(validate.rules).string.uuid = true];
}

// Ответ с ролями пользователя
message GetUserRolesResponse {
  repeated common.v1.Role data = 1;
}

// =============================================================================
// GetRoleUsers
// =============================================================================

// Запрос на получение пользователей роли
message GetRoleUsersRequest {
  string role_id = 1 [(validate.rules).string.uuid = true];
  // Курсорная пагинация (более эффективна для больших наборов данных)
  optional int32 limit = 2 [(validate.rules).int32.gte = 1, (validate.rules).int32.lte = 100];
  optional string cursor = 3; // ID последнего пользователя с предыдущей страницы
}

// Ответ с пользователями роли
message GetRoleUsersResponse {
  repeated string user_ids = 1 [(validate.rules).repeated.items.string.uuid = true];
  int32 total_count = 2;  // Общее количество пользователей с этой ролью
  int32 limit = 3;        // Лимит записей на страницу
  optional string next_cursor = 4; // Курсор для следующей страницы (если есть)
  bool has_more = 5;      // Есть ли еще записи
}
